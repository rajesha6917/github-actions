name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_TAG=$(date +%s)
          REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app

          docker build -t my-python-app:$IMAGE_TAG ./my-python-app
          docker tag my-python-app:$IMAGE_TAG $REPO_URL:$IMAGE_TAG
          docker push $REPO_URL:$IMAGE_TAG

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy Image to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
              set -e  # Exit on error

              IMAGE_TAG=${{ env.IMAGE_TAG }}
              REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app

              echo "âœ… Updating package list..."
              sudo apt update -y

              # Install unzip if not present
              if ! command -v unzip &> /dev/null; then
                echo "ðŸ“¦ Installing unzip..."
                sudo apt install -y unzip
              fi

              # Install AWS CLI manually if not installed
              if ! command -v aws &> /dev/null; then
                echo "ðŸ“¦ Installing AWS CLI..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws/
              fi
              echo "âœ… AWS CLI Version: $(aws --version)"

              # Install Docker if not installed
              if ! command -v docker &> /dev/null; then
                echo "ðŸ“¦ Installing Docker..."
                sudo apt install -y docker.io docker-compose
                sudo systemctl enable docker
                sudo systemctl start docker
              fi
              echo "âœ… Docker Version: $(docker --version)"

              # Ensure user is added to the Docker group
              if ! groups $USER | grep -q '\bdocker\b'; then
                echo "ðŸ”„ Adding user to Docker group..."
                sudo usermod -aG docker $USER
                newgrp docker  # Apply changes immediately
              fi

              # Authenticate with AWS ECR
              echo "ðŸ”‘ Logging into AWS ECR..."
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO_URL

              # Stop and remove existing container if running
              echo "ðŸ›‘ Stopping and removing old container..."
              docker ps -q --filter "name=my-python-app" | grep -q . && docker stop my-python-app && docker rm my-python-app || true

              # Pull the new image from AWS ECR
              echo "ðŸ“¥ Pulling new image: $REPO_URL:$IMAGE_TAG"
              docker pull $REPO_URL:$IMAGE_TAG

              # Run the updated container
              echo "ðŸš€ Running new container..."
              docker run -d -p 80:5000 --name my-python-app --restart unless-stopped $REPO_URL:$IMAGE_TAG

              echo "âœ… Deployment complete!"