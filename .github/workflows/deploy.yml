name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_TAG=$(date +%s)
          REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app

          docker build -t my-python-app:$IMAGE_TAG ./my-python-app
          docker tag my-python-app:$IMAGE_TAG $REPO_URL:$IMAGE_TAG
          docker push $REPO_URL:$IMAGE_TAG

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy Image to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            REPO_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app

            # Authenticate with AWS ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO_URL

            # Ensure Docker is installed and running
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt update -y
              sudo apt install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            # Add the user to the Docker group to avoid permission issues
            sudo usermod -aG docker $USER
            newgrp docker <<EOF

            # Stop and remove any existing container
            docker stop my-python-app || true
            docker rm my-python-app || true

            # Pull the new image
            docker pull $REPO_URL:$IMAGE_TAG

            # Run the container (replace 5000 with your app's port if needed)
            docker run -d -p 80:5000 --name my-python-app $REPO_URL:$IMAGE_TAG

